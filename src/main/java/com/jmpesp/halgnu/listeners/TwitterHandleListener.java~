package com.jmpesp.halgnu.listeners;

import com.jmpesp.halgnu.managers.DatabaseManager;
import com.jmpesp.halgnu.models.ActivityModel;
import com.jmpesp.halgnu.models.MemberModel;
import com.jmpesp.halgnu.tasks.InactivityTask;
import com.jmpesp.halgnu.util.CommandHelper;
import com.jmpesp.halgnu.util.PermissionHelper;
import org.pircbotx.hooks.ListenerAdapter;
import org.pircbotx.hooks.types.GenericMessageEvent;

import java.sql.SQLException;
import java.util.*;
import java.util.concurrent.TimeUnit;

public class ActivityListener extends ListenerAdapter {

    private String m_readTwitter = ".twitter";
    private String m_writeTwitter = ".updatetwitter";

    public static void sendHelpMsg(GenericMessageEvent event) {
        event.getBot().sendIRC().message(event.getUser().getNick(), ".twitter <user> - Retrieve a user's twitter handle");
        event.getBot().sendIRC().message(event.getUser().getNick(), ".updatetwitter <user> - Update your twitter handle");

    }

    @Override
    public void onGenericMessage(final GenericMessageEvent event) throws Exception {

        if (event.getMessage().startsWith(m_readTwitter)) {
            handleReadTwitterCommand(event);
        }

        if (event.getMessage().startsWith(m_writeTwitter)) {
            handleWriteTwitterCommand(event);
        }

    }

    public void handleReadTwitterCommand(GenericMessageEvent event) {
            if (CommandHelper.checkForAmountOfArgs(event.getMessage(), 1)) {
                String check = CommandHelper.removeCommandFromString(event.getMessage()).trim();
                try {
                    MemberModel memberModel = DatabaseManager.getInstance().getActivityByUsername(check);
                    if (memberModel != null) {
                        event.respond(memberModel.getTwitterHandle()+" :<"
                                +memberModel.getUsername()+"> ");
                    } else {
                        event.respond("No record found.");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    event.respond("No record found.");
                }

            } else {
                event.respond("Ex. "+ m_readTwitter +" <user>");
            }
        } else {
            event.respond("Permission denied");
        }
    }
    public void handleWriteTwitterCommand(GenericMessageEvent event) {
        if (PermissionHelper.HasPermissionFromList(m_exemptNeededPermissions, event.getUser().getNick())) {
            if (CommandHelper.checkForAmountOfArgs(event.getMessage(), 1)) {
                String toggleUser = CommandHelper.removeCommandFromString(event.getMessage()).trim();

                if (DatabaseManager.getInstance().toggleActivityExempt(toggleUser)) {
                    if(DatabaseManager.getInstance().getActivityExempt(toggleUser)) {
                        event.respond(toggleUser + " is now exempt from idle checks");
                    } else {
                        event.respond(toggleUser + " is no longer exempt from idle checks");
                    }
                } else {
                    event.respond("No record found.");
                }

            } else {
                event.respond("Ex. "+ m_toggleExemptCommand +" <user>");
            }
        } else {
            event.respond("Permission denied");
        }
    }
}
